<templates>
  <t t-name="o-spreadsheet-GaugeChartDesignPanel">
    <div>
      <ChartColor
        currentColor="props.definition.background"
        onColorPicked.bind="updateBackgroundColor"
      />
      <ChartTitle title="title" update.bind="updateTitle"/>

      <div class="o-section">
        <div class="o-section-title">Range</div>
        <div class="o-subsection-left">
          <input
            type="text"
            t-model="state.sectionRule.rangeMin"
            t-on-change="() => this.updateSectionRule(state.sectionRule)"
            t-on-input="() => this.canUpdateSectionRule(state.sectionRule)"
            class="o-input o-data-range-min"
            t-att-class="{ 'o-invalid': isRangeMinInvalid() }"
          />
        </div>
        <div class="o-subsection-right">
          <input
            type="text"
            t-model="state.sectionRule.rangeMax"
            t-on-change="() => this.updateSectionRule(state.sectionRule)"
            t-on-input="() => this.canUpdateSectionRule(state.sectionRule)"
            class="o-input o-data-range-max"
            t-att-class="{ 'o-invalid': isRangeMaxInvalid() }"
          />
        </div>
      </div>

      <div class="o-section">
        <div class="o-section-title">Thresholds</div>
        <t t-call="o-spreadsheet-GaugeChartColorSectionTemplate">
          <t t-set="sectionRule" t-value="state.sectionRule"/>
        </t>
      </div>

      <div class="o-section" t-if="designErrorMessages.length">
        <ValidationMessages messages="designErrorMessages" msgType="'error'"/>
      </div>
    </div>
  </t>

  <t t-name="o-spreadsheet-GaugeChartColorSectionTemplate">
    <div class="o-gauge-color-set">
      <table>
        <tr>
          <th class="o-gauge-color-set-colorPicker"/>
          <th class="o-gauge-color-set-text"/>
          <th class="o-gauge-color-set-value">Value</th>
          <th class="o-gauge-color-set-type">Type</th>
        </tr>

        <t t-call="o-spreadsheet-GaugeChartColorSectionTemplateRow">
          <t t-set="sectionColor" t-value="sectionRule.colors.lowerColor"/>
          <t t-set="sectionType" t-value="'lowerColor'"/>
          <t t-set="inflectionPoint" t-value="sectionRule.lowerInflectionPoint"/>
          <t t-set="isInvalid" t-value="isLowerInflectionPointInvalid"/>
          <t t-set="inflectionPointName" t-value="'lowerInflectionPoint'"/>
        </t>

        <t t-call="o-spreadsheet-GaugeChartColorSectionTemplateRow">
          <t t-set="sectionColor" t-value="sectionRule.colors.middleColor"/>
          <t t-set="sectionType" t-value="'middleColor'"/>
          <t t-set="inflectionPoint" t-value="sectionRule.upperInflectionPoint"/>
          <t t-set="isInvalid" t-value="isUpperInflectionPointInvalid"/>
          <t t-set="inflectionPointName" t-value="'upperInflectionPoint'"/>
        </t>

        <tr>
          <td>
            <ColorPickerWidget
              currentColor="sectionRule.colors.upperColor"
              toggleColorPicker="(ev) => this.toggleMenu('sectionColor-upperColor', ev)"
              showColorPicker="state.openedMenu === 'sectionColor-upperColor'"
              onColorPicked="(color) => this.updateSectionColor('upperColor', color)"
              icon="'o-spreadsheet-Icon.FILL_COLOR'"
            />
          </td>
          <td>Else</td>
          <td/>
          <td/>
          <td/>
        </tr>
      </table>
    </div>
  </t>

  <t t-name="o-spreadsheet-GaugeChartColorSectionTemplateRow">
    <tr>
      <td>
        <ColorPickerWidget
          currentColor="sectionColor"
          toggleColorPicker="(ev) => this.toggleMenu('sectionColor-'+sectionType, ev)"
          showColorPicker="state.openedMenu === 'sectionColor-'+sectionType"
          onColorPicked="(color) => this.updateSectionColor(sectionType, color)"
          icon="'o-spreadsheet-Icon.FILL_COLOR'"
        />
      </td>
      <td>When value is below</td>
      <td>
        <input
          type="text"
          class="o-input"
          t-model="inflectionPoint.value"
          t-on-input="() => this.canUpdateSectionRule(state.sectionRule)"
          t-on-change="() => this.updateSectionRule(state.sectionRule)"
          t-attf-class="o-input-{{inflectionPointName}}"
          t-att-class="{ 'o-invalid': isInvalid }"
        />
      </td>
      <td>
        <select
          class="o-input"
          name="valueType"
          t-model="inflectionPoint.type"
          t-on-change="(ev) => this.updateSectionRule(state.sectionRule)">
          <option value="number">Number</option>
          <option value="percentage">Percentage</option>
        </select>
      </td>
    </tr>
  </t>
</templates>
