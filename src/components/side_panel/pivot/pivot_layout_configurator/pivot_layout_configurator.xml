<templates>
  <t t-name="o-spreadsheet-PivotLayoutConfigurator">
    <div class="pivot-dimensions o-section">
      <div
        class="o-fw-bold py-1 d-flex flex-row justify-content-between align-items-center o-section-title">
        Columns
        <AddDimensionButton
          onFieldPicked.bind="addColumnDimension"
          fields="props.unusedGroupableFields"
        />
      </div>
      <DragAndDropListItems
        draggableItemIds="draggableItemIds"
        canStartDrag.bind="canStartMeasureDrag"
        onDragEnd.bind="onDimensionDragEnd">
        <t t-set-slot="default" t-slot-scope="dragAndDrop">
          <t t-foreach="props.definition.columns" t-as="col" t-key="col.nameWithGranularity">
            <div
              t-on-pointerdown="(ev) => dragAndDrop.start(col.nameWithGranularity, ev)"
              t-att-style="dragAndDrop.itemsStyle[col.nameWithGranularity]"
              class="pt-1">
              <PivotDimension dimension="col" onRemoved.bind="removeDimension">
                <PivotDimensionGranularity
                  t-if="isDateOrDatetimeField(col)"
                  dimension="col"
                  onUpdated.bind="this.updateGranularity"
                  availableGranularities="props.unusedGranularities[col.fieldName]"
                  allGranularities="getGranularitiesFor(col)"
                />
                <PivotDimensionOrder dimension="col" onUpdated.bind="this.updateOrder"/>
              </PivotDimension>
            </div>
          </t>
          <div
            class="o-fw-bold pt-4 pb-1 d-flex flex-row justify-content-between align-items-center o-section-title"
            t-att-style="dragAndDrop.itemsStyle['__rows_title__']">
            Rows
            <AddDimensionButton
              onFieldPicked.bind="addRowDimension"
              fields="props.unusedGroupableFields"
            />
          </div>
          <t t-foreach="props.definition.rows" t-as="row" t-key="row.nameWithGranularity">
            <div
              t-on-pointerdown="(ev) => dragAndDrop.start(row.nameWithGranularity, ev)"
              t-att-style="dragAndDrop.itemsStyle[row.nameWithGranularity]"
              class="pt-1">
              <PivotDimension dimension="row" onRemoved.bind="removeDimension">
                <PivotDimensionGranularity
                  t-if="isDateOrDatetimeField(row)"
                  dimension="row"
                  onUpdated.bind="this.updateGranularity"
                  availableGranularities="props.unusedGranularities[row.fieldName]"
                  allGranularities="getGranularitiesFor(row)"
                />
                <PivotDimensionOrder dimension="row" onUpdated.bind="this.updateOrder"/>
              </PivotDimension>
            </div>
          </t>
        </t>
      </DragAndDropListItems>
      <DragAndDropListItems
        draggableItemIds="draggableMeasureItemIds"
        canStartDrag.bind="canStartMeasureDrag"
        onDragEnd.bind="onMeasureDragEnd">
        <t t-set-slot="default" t-slot-scope="dragAndDrop">
          <div
            class="o-fw-bold pt-4 pb-1 d-flex flex-row justify-content-between align-items-center o-section-title o-pivot-measure">
            Measures
            <AddDimensionButton
              onFieldPicked.bind="addMeasureDimension"
              fields="props.measureFields">
              <div
                t-on-click="addCalculatedMeasure"
                class="p-2 bg-white border-top d-flex align-items-center sticky-bottom add-calculated-measure">
                <i class="pe-1">
                  <t t-call="o-spreadsheet-Icon.FORMULA"/>
                </i>
                Add calculated measure
              </div>
            </AddDimensionButton>
          </div>
          <t t-foreach="props.definition.measures" t-as="measure" t-key="measure.id">
            <div
              t-on-pointerdown="(ev) => dragAndDrop.start(measure.id, ev)"
              t-att-style="dragAndDrop.itemsStyle[measure.id]"
              t-att-class="measure.isHidden ? 'opacity-50' : ''"
              class="pt-1 pivot-measure">
              <PivotMeasureEditor
                pivotId="props.pivotId"
                definition="props.definition"
                measure="measure"
                aggregators="AGGREGATORS"
                onRemoved="() => this.removeMeasureDimension(measure)"
                onMeasureUpdated="(newMeasure) => this.updateMeasure(measure, newMeasure)"
                generateMeasureId.bind="getMeasureId"
              />
            </div>
          </t>
        </t>
      </DragAndDropListItems>
    </div>
  </t>
</templates>
