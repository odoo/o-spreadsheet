<templates>
  <t t-name="o-spreadsheet-TopBar" owl="1">
    <div class="o-spreadsheet-topbar o-two-columns" t-on-click="props.onClick">
      <div class="o-topbar-top">
        <!-- Menus -->
        <div class="o-topbar-topleft">
          <t t-foreach="menus" t-as="menu" t-key="menu_index">
            <div
              t-if="menu.children.length !== 0"
              class="o-topbar-menu"
              t-att-class="{'o-topbar-menu-active': state.menuState.parentMenu and state.menuState.parentMenu.id === menu.id}"
              t-on-click="(ev) => this.toggleContextMenu(menu, ev)"
              t-on-mouseover="(ev) => this.onMenuMouseOver(menu, ev)"
              t-att-data-id="menu.id">
              <t t-esc="getMenuName(menu)"/>
            </div>
          </t>
          <Menu
            t-if="state.menuState.isOpen"
            position="state.menuState.position"
            menuItems="state.menuState.menuItems"
            onClose="() => this.closeMenus()"
          />
        </div>
        <div class="o-topbar-topright">
          <div t-foreach="topbarComponents" t-as="comp" t-key="comp.id">
            <t t-component="comp.component"/>
          </div>
        </div>
      </div>
      <!-- Toolbar and Cell Content -->
      <div class="d-flex">
        <div class="o-topbar-toolbar">
          <!-- Toolbar -->
          <div t-if="env.model.getters.isReadonly()" class="o-readonly-toolbar text-muted">
            <span>
              <i class="fa fa-eye"/>
              Readonly Access
            </span>
          </div>
          <div t-else="" class="o-toolbar-tools">
            <div
              class="o-tool"
              title="Undo"
              t-att-class="{'o-disabled': !undoTool}"
              t-on-click="undo">
              <t t-call="o-spreadsheet-Icon.UNDO"/>
            </div>
            <div
              class="o-tool"
              t-att-class="{'o-disabled': !redoTool}"
              title="Redo"
              t-on-click="redo">
              <t t-call="o-spreadsheet-Icon.REDO"/>
            </div>
            <div
              class="o-tool"
              title="Paint Format"
              t-att-class="{active:paintFormatTool}"
              t-on-click="paintFormat">
              <t t-call="o-spreadsheet-Icon.PAINT_FORMAT"/>
            </div>
            <div class="o-tool" title="Clear Format" t-on-click="clearFormatting">
              <t t-call="o-spreadsheet-Icon.CLEAR_FORMAT"/>
            </div>
            <div class="o-divider"/>
            <div
              class="o-tool"
              title="Format as percent"
              t-on-click="(ev) => this.toggleFormat('percent', ev)">
              %
            </div>
            <div
              class="o-tool"
              title="Decrease decimal places"
              t-on-click="(ev) => this.setDecimal(-1, ev)">
              .0
            </div>
            <div
              class="o-tool"
              title="Increase decimal places"
              t-on-click="(ev) => this.setDecimal(+1, ev)">
              .00
            </div>
            <div class="o-dropdown">
              <div
                class="o-tool o-dropdown-button o-text-icon"
                title="More formats"
                t-on-click="(ev) => this.toggleDropdownTool('formatTool', ev)">
                123
                <t t-call="o-spreadsheet-Icon.TRIANGLE_DOWN"/>
              </div>
              <div
                class="o-dropdown-content o-text-options  o-format-tool "
                t-if="state.activeTool === 'formatTool'"
                t-att-style="dropdownStyle"
                t-on-click.stop="">
                <t t-foreach="commonFormats" t-as="commonFormat" t-key="commonFormat.name">
                  <div
                    class="o-dropdown-item"
                    t-att-data-format="commonFormat.name"
                    t-on-click="() => this.setFormat(commonFormat.name)"
                    t-att-class="{active: currentFormatName === commonFormat.name}">
                    <t t-esc="commonFormat.text"/>
                    <span class="float-end text-muted" t-esc="commonFormat.description"/>
                  </div>
                </t>
                <t t-foreach="customFormats" t-as="customFormat" t-key="customFormat.name">
                  <div
                    t-att-data-custom="customFormat.name"
                    class="o-dropdown-item"
                    t-on-click="() => this.setFormat(customFormat.name, true)">
                    <t t-esc="customFormat.text"/>
                  </div>
                </t>
              </div>
            </div>
            <div class="o-divider"/>
            <FontSizeEditor onToggle="() => this.onClick()" dropdownStyle="this.dropdownStyle"/>
            <div class="o-divider"/>
            <div
              class="o-tool"
              title="Bold"
              t-att-class="{active:style.bold}"
              t-on-click="(ev) => this.toggleStyle('bold', ev)">
              <t t-call="o-spreadsheet-Icon.BOLD"/>
            </div>
            <div
              class="o-tool"
              title="Italic"
              t-att-class="{active:style.italic}"
              t-on-click="(ev) => this.toggleStyle('italic', ev)">
              <t t-call="o-spreadsheet-Icon.ITALIC"/>
            </div>
            <div
              class="o-tool"
              title="Strikethrough"
              t-att-class="{active:style.strikethrough}"
              t-on-click="(ev) => this.toggleStyle('strikethrough', ev)">
              <t t-call="o-spreadsheet-Icon.STRIKE"/>
            </div>
            <div class="o-dropdown">
              <ColorPickerWidget
                currentColor="textColor"
                toggleColorPicker="(ev) => this.toggleDropdownTool('textColorTool', ev)"
                showColorPicker="state.activeTool === 'textColorTool'"
                onColorPicked="(color) => this.setColor('textColor', color)"
                title="env._t('Text Color')"
                icon="'o-spreadsheet-Icon.TEXT_COLOR'"
                dropdownMaxHeight="this.props.dropdownMaxHeight"
                class="'o-tool o-dropdown-button'"
              />
            </div>
            <div class="o-divider"/>
            <div class="o-dropdown">
              <ColorPickerWidget
                currentColor="fillColor"
                toggleColorPicker="(ev) => this.toggleDropdownTool('fillColorTool', ev)"
                showColorPicker="state.activeTool === 'fillColorTool'"
                onColorPicked="(color) => this.setColor('fillColor', color)"
                title="env._t('Fill Color')"
                icon="'o-spreadsheet-Icon.FILL_COLOR'"
                dropdownMaxHeight="this.props.dropdownMaxHeight"
                class="'o-tool o-dropdown-button'"
              />
            </div>
            <div class="o-dropdown">
              <div
                class="o-tool o-dropdown-button"
                title="Borders"
                t-on-click="(ev) => this.toggleDropdownTool('borderTool', ev)">
                <span>
                  <t t-call="o-spreadsheet-Icon.BORDERS"/>
                </span>
              </div>
              <div
                class="o-dropdown-content o-border-dropdown"
                t-if="state.activeTool === 'borderTool'"
                t-att-style="dropdownStyle"
                t-on-click.stop="">
                <div class="o-dropdown-line">
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('all')">
                    <t t-call="o-spreadsheet-Icon.BORDERS"/>
                  </span>
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('hv')">
                    <t t-call="o-spreadsheet-Icon.BORDER_HV"/>
                  </span>
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('h')">
                    <t t-call="o-spreadsheet-Icon.BORDER_H"/>
                  </span>
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('v')">
                    <t t-call="o-spreadsheet-Icon.BORDER_V"/>
                  </span>
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('external')">
                    <t t-call="o-spreadsheet-Icon.BORDER_EXTERNAL"/>
                  </span>
                </div>
                <div class="o-dropdown-line">
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('left')">
                    <t t-call="o-spreadsheet-Icon.BORDER_LEFT"/>
                  </span>
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('top')">
                    <t t-call="o-spreadsheet-Icon.BORDER_TOP"/>
                  </span>
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('right')">
                    <t t-call="o-spreadsheet-Icon.BORDER_RIGHT"/>
                  </span>
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('bottom')">
                    <t t-call="o-spreadsheet-Icon.BORDER_BOTTOM"/>
                  </span>
                  <span class="o-line-item" t-on-click="(ev) => this.setBorder('clear')">
                    <t t-call="o-spreadsheet-Icon.BORDER_CLEAR"/>
                  </span>
                </div>
              </div>
            </div>
            <div
              class="o-tool o-merge-tool"
              title="Merge Cells"
              t-att-class="{active:inMerge, 'o-disabled': cannotMerge}"
              t-on-click="toggleMerge">
              <t t-call="o-spreadsheet-Icon.MERGE_CELL"/>
            </div>
            <div class="o-divider"/>
            <div class="o-dropdown">
              <div
                class="o-tool o-dropdown-button"
                title="Horizontal align"
                t-on-click="(ev) => this.toggleDropdownTool('horizontalAlignTool', ev)">
                <span>
                  <t t-if="style.align === 'right'">
                    <t t-call="o-spreadsheet-Icon.ALIGN_RIGHT"/>
                  </t>
                  <t t-elif="style.align === 'center'">
                    <t t-call="o-spreadsheet-Icon.ALIGN_CENTER"/>
                  </t>
                  <t t-else="">
                    <t t-call="o-spreadsheet-Icon.ALIGN_LEFT"/>
                  </t>
                  <t t-call="o-spreadsheet-Icon.TRIANGLE_DOWN"/>
                </span>
              </div>
              <div
                t-if="state.activeTool === 'horizontalAlignTool'"
                class="o-dropdown-content"
                t-att-style="dropdownStyle"
                t-on-click.stop="">
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleHorizontalAlign('left')">
                  <t t-call="o-spreadsheet-Icon.ALIGN_LEFT"/>
                </div>
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleHorizontalAlign('center')">
                  <t t-call="o-spreadsheet-Icon.ALIGN_CENTER"/>
                </div>
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleHorizontalAlign('right')">
                  <t t-call="o-spreadsheet-Icon.ALIGN_RIGHT"/>
                </div>
              </div>
            </div>
            <div class="o-dropdown">
              <div
                class="o-tool o-dropdown-button"
                title="Vertical align"
                t-on-click="(ev) => this.toggleDropdownTool('verticalAlignTool', ev)">
                <span>
                  <t t-if="style.verticalAlign === 'top'">
                    <t t-call="o-spreadsheet-Icon.ALIGN_TOP"/>
                  </t>
                  <t t-elif="style.verticalAlign === 'bottom'">
                    <t t-call="o-spreadsheet-Icon.ALIGN_BOTTOM"/>
                  </t>
                  <t t-else="">
                    <t t-call="o-spreadsheet-Icon.ALIGN_MIDDLE"/>
                  </t>
                  <t t-call="o-spreadsheet-Icon.TRIANGLE_DOWN"/>
                </span>
              </div>
              <div
                t-if="state.activeTool === 'verticalAlignTool'"
                class="o-dropdown-content"
                t-att-style="dropdownStyle"
                t-on-click.stop="">
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleVerticalAlign('top')">
                  <t t-call="o-spreadsheet-Icon.ALIGN_TOP"/>
                </div>
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleVerticalAlign('middle')">
                  <t t-call="o-spreadsheet-Icon.ALIGN_MIDDLE"/>
                </div>
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleVerticalAlign('bottom')">
                  <t t-call="o-spreadsheet-Icon.ALIGN_BOTTOM"/>
                </div>
              </div>
            </div>
            <div class="o-dropdown">
              <div
                class="o-tool o-dropdown-button"
                title="Text wrapping"
                t-on-click="(ev) => this.toggleDropdownTool('textWrappingTool', ev)">
                <span>
                  <t t-if="style.wrapping === 'wrap'">
                    <t t-call="o-spreadsheet-Icon.WRAPPING_WRAP"/>
                  </t>
                  <t t-elif="style.wrapping === 'clip'">
                    <t t-call="o-spreadsheet-Icon.WRAPPING_CLIP"/>
                  </t>
                  <t t-else="">
                    <t t-call="o-spreadsheet-Icon.WRAPPING_OVERFLOW"/>
                  </t>
                  <t t-call="o-spreadsheet-Icon.TRIANGLE_DOWN"/>
                </span>
              </div>
              <div
                t-if="state.activeTool === 'textWrappingTool'"
                class="o-dropdown-content"
                t-att-style="dropdownStyle"
                t-on-click.stop="">
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleTextWrapping('overflow')">
                  <t t-call="o-spreadsheet-Icon.WRAPPING_OVERFLOW"/>
                </div>
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleTextWrapping('wrap')">
                  <t t-call="o-spreadsheet-Icon.WRAPPING_WRAP"/>
                </div>
                <div
                  class="o-dropdown-item o-dropdown-align-item"
                  t-on-click="() => this.toggleTextWrapping('clip')">
                  <t t-call="o-spreadsheet-Icon.WRAPPING_CLIP"/>
                </div>
              </div>
            </div>
            <div class="o-divider"/>
            <div
              t-if="selectionContainsFilter"
              class="o-tool o-filter-tool o-tool-outlined"
              title="Remove selected filters"
              t-on-click="removeFilter">
              <t t-call="o-spreadsheet-Icon.FILTER_ICON_ACTIVE"/>
            </div>
            <div
              t-else=""
              class="o-tool o-filter-tool"
              t-att-class="{'o-disabled': cannotCreateFilter}"
              title="Create filter"
              t-on-click="createFilter">
              <t t-call="o-spreadsheet-Icon.FILTER_ICON_INACTIVE"/>
            </div>
          </div>
        </div>
        <TopBarComposer
          focus="props.focusComposer"
          onComposerContentFocused="props.onComposerContentFocused"
        />
      </div>
    </div>
  </t>
</templates>
