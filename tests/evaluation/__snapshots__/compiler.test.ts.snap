// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compile functions with meta arguments function call requesting meta parameter 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USEMETAARG(|0|)
const _1 = ref(deps[0], true, "USEMETAARG",  1);
return ctx['USEMETAARG'](_1);
}"
`;

exports[`compile functions with meta arguments function call requesting meta parameter 2`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USEMETAARG(|0|)
const _1 = ref(deps[0], true, "USEMETAARG",  1);
return ctx['USEMETAARG'](_1);
}"
`;

exports[`expression compiler cells are converted to ranges if function require a range 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|0|)
const _1 = range(deps[0]);
return ctx['SUM'](_1);
}"
`;

exports[`expression compiler expression with $ref 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|+|1|+|2|
const _1 = ref(deps[0], false, "ADD",  undefined);
const _2 = ref(deps[1], false, "ADD",  undefined);
const _3 = ctx['ADD'](_1, _2);
const _4 = ref(deps[2], false, "ADD",  undefined);
return ctx['ADD'](_3, _4);
}"
`;

exports[`expression compiler expression with references with a sheet 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|
return ref(deps[0], false, "EQ",  undefined);
}"
`;

exports[`expression compiler expressions with a debugger 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =?|0|/|N0|
debugger;
const _1 = ref(deps[0], false, "DIVIDE",  undefined);
const _2 = { value: this.constantValues.numbers[0] };
return ctx['DIVIDE'](_1, _2);
}"
`;

exports[`expression compiler read some values and functions 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|+sum(|1|)
const _1 = ref(deps[0], false, "ADD",  undefined);
const _2 = range(deps[1]);
const _3 = ctx['SUM'](_2);
return ctx['ADD'](_1, _3);
}"
`;

exports[`expression compiler some arithmetic expressions 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|
return { value: this.constantValues.numbers[0] };
}"
`;

exports[`expression compiler some arithmetic expressions 2`] = `
"function anonymous(deps,ref,range,ctx
) {
// =true
return { value: true };
}"
`;

exports[`expression compiler some arithmetic expressions 3`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|S0|
return { value: this.constantValues.strings[0] };
}"
`;

exports[`expression compiler some arithmetic expressions 4`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|+|N1|
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
return ctx['ADD'](_1, _2);
}"
`;

exports[`expression compiler some arithmetic expressions 5`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|*|N1|
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
return ctx['MULTIPLY'](_1, _2);
}"
`;

exports[`expression compiler some arithmetic expressions 6`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|-|N1|
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
return ctx['MINUS'](_1, _2);
}"
`;

exports[`expression compiler some arithmetic expressions 7`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|/|N1|
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
return ctx['DIVIDE'](_1, _2);
}"
`;

exports[`expression compiler some arithmetic expressions 8`] = `
"function anonymous(deps,ref,range,ctx
) {
// =-|N0|
const _1 = { value: this.constantValues.numbers[0] };
return ctx['UMINUS'](_1);
}"
`;

exports[`expression compiler some arithmetic expressions 9`] = `
"function anonymous(deps,ref,range,ctx
) {
// =(|N0|+|N1|)*(-|N1|+|N2|)
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
const _3 = ctx['ADD'](_1, _2);
const _4 = { value: this.constantValues.numbers[1] };
const _5 = ctx['UMINUS'](_4);
const _6 = { value: this.constantValues.numbers[2] };
const _7 = ctx['ADD'](_5, _6);
return ctx['MULTIPLY'](_3, _7);
}"
`;

exports[`expression compiler some arithmetic expressions 10`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|N0|,|N1|)
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
return ctx['SUM'](_1,_2);
}"
`;

exports[`expression compiler some arithmetic expressions 11`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(true,|S0|)
const _1 = { value: true };
const _2 = { value: this.constantValues.strings[0] };
return ctx['SUM'](_1,_2);
}"
`;

exports[`expression compiler some arithmetic expressions 12`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|N0|,,|N1|)
const _1 = { value: this.constantValues.numbers[0] };
const _2 = undefined;
const _3 = { value: this.constantValues.numbers[1] };
return ctx['SUM'](_1,_2,_3);
}"
`;

exports[`expression compiler some arithmetic expressions 13`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|%
const _1 = { value: this.constantValues.numbers[0] };
return ctx['UNARY.PERCENT'](_1);
}"
`;

exports[`expression compiler some arithmetic expressions 14`] = `
"function anonymous(deps,ref,range,ctx
) {
// =(|N0|+|N1|)%
const _1 = { value: this.constantValues.numbers[0] };
const _2 = { value: this.constantValues.numbers[1] };
const _3 = ctx['ADD'](_1, _2);
return ctx['UNARY.PERCENT'](_3);
}"
`;

exports[`expression compiler some arithmetic expressions 15`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|%
const _1 = ref(deps[0], false, "UNARY.PERCENT",  undefined);
return ctx['UNARY.PERCENT'](_1);
}"
`;

exports[`expression compiler with the same reference multiple times 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =SUM(|0|,|0|,|2|)
const _1 = range(deps[0]);
const _2 = range(deps[0]);
const _3 = range(deps[2]);
return ctx['SUM'](_1,_2,_3);
}"
`;
