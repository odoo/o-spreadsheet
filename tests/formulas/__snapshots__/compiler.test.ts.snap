// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compile functions with lazy arguments functions call requesting lazy parameters 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USELAZYARG(|N0|)
const _2 = () => {
	return { value: this.constantValues.numbers[0] };
}
ctx.__lastFnCalled = 'USELAZYARG';
let _1 = ctx['USELAZYARG'](_2);
return _1;
}"
`;

exports[`compile functions with lazy arguments functions call requesting lazy parameters 2`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USELAZYARG(|N0|/|N1|)
const _2 = () => {
	let _3 = { value: this.constantValues.numbers[0] };
	let _4 = { value: this.constantValues.numbers[1] };
	ctx.__lastFnCalled = 'DIVIDE';
	return ctx['DIVIDE'](_3, _4);
}
ctx.__lastFnCalled = 'USELAZYARG';
let _1 = ctx['USELAZYARG'](_2);
return _1;
}"
`;

exports[`compile functions with lazy arguments functions call requesting lazy parameters 3`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USELAZYARG(|N0|/|N0|/|N1|)
const _2 = () => {
	let _4 = { value: this.constantValues.numbers[0] };
	let _5 = { value: this.constantValues.numbers[0] };
	ctx.__lastFnCalled = 'DIVIDE';
	let _3 = ctx['DIVIDE'](_4, _5);
	let _6 = { value: this.constantValues.numbers[1] };
	ctx.__lastFnCalled = 'DIVIDE';
	return ctx['DIVIDE'](_3, _6);
}
ctx.__lastFnCalled = 'USELAZYARG';
let _1 = ctx['USELAZYARG'](_2);
return _1;
}"
`;

exports[`compile functions with lazy arguments functions call requesting lazy parameters 4`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USELAZYARG(USELAZYARG(|N0|))
const _2 = () => {
	const _3 = () => {
		return { value: this.constantValues.numbers[0] };
	}
	ctx.__lastFnCalled = 'USELAZYARG';
	return ctx['USELAZYARG'](_3);
}
ctx.__lastFnCalled = 'USELAZYARG';
let _1 = ctx['USELAZYARG'](_2);
return _1;
}"
`;

exports[`compile functions with meta arguments function call requesting meta parameter 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USEMETAARG(|0|)
let _2 = ref(deps[0], true, "USEMETAARG",  1);
ctx.__lastFnCalled = 'USEMETAARG';
let _1 = ctx['USEMETAARG'](_2);
return _1;
}"
`;

exports[`compile functions with meta arguments function call requesting meta parameter 2`] = `
"function anonymous(deps,ref,range,ctx
) {
// =USEMETAARG(|0|)
let _2 = ref(deps[0], true, "USEMETAARG",  1);
ctx.__lastFnCalled = 'USEMETAARG';
let _1 = ctx['USEMETAARG'](_2);
return _1;
}"
`;

exports[`expression compiler cells are converted to ranges if function require a range 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|0|)
let _2 = range(deps[0]);
ctx.__lastFnCalled = 'SUM';
let _1 = ctx['SUM'](_2);
return _1;
}"
`;

exports[`expression compiler expression with $ref 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|+|1|+|2|
let _3 = ref(deps[0], false, "ADD",  undefined);
let _4 = ref(deps[1], false, "ADD",  undefined);
ctx.__lastFnCalled = 'ADD';
let _2 = ctx['ADD'](_3, _4);
let _5 = ref(deps[2], false, "ADD",  undefined);
ctx.__lastFnCalled = 'ADD';
let _1 = ctx['ADD'](_2, _5);
return _1;
}"
`;

exports[`expression compiler expression with references with a sheet 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|
let _1 = ref(deps[0], false, "EQ",  undefined);
return _1;
}"
`;

exports[`expression compiler expressions with a debugger 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =?|0|/|N0|
debugger;
let _2 = ref(deps[0], false, "DIVIDE",  undefined);
let _3 = { value: this.constantValues.numbers[0] };
ctx.__lastFnCalled = 'DIVIDE';
let _1 = ctx['DIVIDE'](_2, _3);
return _1;
}"
`;

exports[`expression compiler read some values and functions 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|+sum(|1|)
let _2 = ref(deps[0], false, "ADD",  undefined);
let _4 = range(deps[1]);
ctx.__lastFnCalled = 'SUM';
let _3 = ctx['SUM'](_4);
ctx.__lastFnCalled = 'ADD';
let _1 = ctx['ADD'](_2, _3);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|
let _1 = { value: this.constantValues.numbers[0] };
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 2`] = `
"function anonymous(deps,ref,range,ctx
) {
// =true
return { value: true };
}"
`;

exports[`expression compiler some arithmetic expressions 3`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|S0|
let _1 = { value: this.constantValues.strings[0] };
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 4`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|+|N1|
let _2 = { value: this.constantValues.numbers[0] };
let _3 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'ADD';
let _1 = ctx['ADD'](_2, _3);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 5`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|*|N1|
let _2 = { value: this.constantValues.numbers[0] };
let _3 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'MULTIPLY';
let _1 = ctx['MULTIPLY'](_2, _3);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 6`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|-|N1|
let _2 = { value: this.constantValues.numbers[0] };
let _3 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'MINUS';
let _1 = ctx['MINUS'](_2, _3);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 7`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|/|N1|
let _2 = { value: this.constantValues.numbers[0] };
let _3 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'DIVIDE';
let _1 = ctx['DIVIDE'](_2, _3);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 8`] = `
"function anonymous(deps,ref,range,ctx
) {
// =-|N0|
let _2 = { value: this.constantValues.numbers[0] };
ctx.__lastFnCalled = 'UMINUS';
let _1 = ctx['UMINUS'](_2);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 9`] = `
"function anonymous(deps,ref,range,ctx
) {
// =(|N0|+|N1|)*(-|N1|+|N2|)
let _3 = { value: this.constantValues.numbers[0] };
let _4 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'ADD';
let _2 = ctx['ADD'](_3, _4);
let _7 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'UMINUS';
let _6 = ctx['UMINUS'](_7);
let _8 = { value: this.constantValues.numbers[2] };
ctx.__lastFnCalled = 'ADD';
let _5 = ctx['ADD'](_6, _8);
ctx.__lastFnCalled = 'MULTIPLY';
let _1 = ctx['MULTIPLY'](_2, _5);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 10`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|N0|,|N1|)
let _2 = { value: this.constantValues.numbers[0] };
let _3 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'SUM';
let _1 = ctx['SUM'](_2,_3);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 11`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(true,|S0|)
let _2 = { value: this.constantValues.strings[0] };
ctx.__lastFnCalled = 'SUM';
let _1 = ctx['SUM']({ value: true },_2);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 12`] = `
"function anonymous(deps,ref,range,ctx
) {
// =sum(|N0|,,|N1|)
let _2 = { value: this.constantValues.numbers[0] };
let _3 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'SUM';
let _1 = ctx['SUM'](_2,undefined,_3);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 13`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|N0|%
let _2 = { value: this.constantValues.numbers[0] };
ctx.__lastFnCalled = 'UNARY.PERCENT';
let _1 = ctx['UNARY.PERCENT'](_2);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 14`] = `
"function anonymous(deps,ref,range,ctx
) {
// =(|N0|+|N1|)%
let _3 = { value: this.constantValues.numbers[0] };
let _4 = { value: this.constantValues.numbers[1] };
ctx.__lastFnCalled = 'ADD';
let _2 = ctx['ADD'](_3, _4);
ctx.__lastFnCalled = 'UNARY.PERCENT';
let _1 = ctx['UNARY.PERCENT'](_2);
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 15`] = `
"function anonymous(deps,ref,range,ctx
) {
// =|0|%
let _2 = ref(deps[0], false, "UNARY.PERCENT",  undefined);
ctx.__lastFnCalled = 'UNARY.PERCENT';
let _1 = ctx['UNARY.PERCENT'](_2);
return _1;
}"
`;

exports[`expression compiler with the same reference multiple times 1`] = `
"function anonymous(deps,ref,range,ctx
) {
// =SUM(|0|,|0|,|2|)
let _2 = range(deps[0]);
let _3 = range(deps[0]);
let _4 = range(deps[2]);
ctx.__lastFnCalled = 'SUM';
let _1 = ctx['SUM'](_2,_3,_4);
return _1;
}"
`;
