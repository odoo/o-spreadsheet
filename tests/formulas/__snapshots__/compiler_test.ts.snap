// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compile functions with lazy arguments functions call requesting lazy parameters 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =USELAZYARG(|N0|)
let _2 = ()=> deps[0]
ctx.__lastFnCalled = 'USELAZYARG'
let _1 = ctx['USELAZYARG'](_2)
return _1;
}"
`;

exports[`compile functions with lazy arguments functions call requesting lazy parameters 2`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =USELAZYARG(|N0|/|N1|)
let _3 = deps[0]
let _4 = deps[1]
ctx.__lastFnCalled = 'DIVIDE'
let _2 = ()=> ctx['DIVIDE'](_3, _4)
ctx.__lastFnCalled = 'USELAZYARG'
let _1 = ctx['USELAZYARG'](_2)
return _1;
}"
`;

exports[`expression compiler async functions 1`] = `
"async function anonymous(deps,sheetId,ref,range,ctx
) {
// =WAIT(|N0|)
let _2 = deps[0]
ctx.__lastFnCalled = 'WAIT'
let _1 = await ctx['WAIT'](_2)
return _1;
}"
`;

exports[`expression compiler cells are converted to ranges if function require a range 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =sum(|0|)
let _2 = range(0, deps, sheetId)
ctx.__lastFnCalled = 'SUM'
let _1 = ctx['SUM'](_2)
return _1;
}"
`;

exports[`expression compiler expression with $ref 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|0|+|1|+|2|
let _3 = ref(0, deps, sheetId,
              \\"undefined\\", undefined)
let _4 = ref(1, deps, sheetId,
              \\"undefined\\", undefined)
ctx.__lastFnCalled = 'ADD'
let _2 = ctx['ADD'](_3, _4)
let _5 = ref(2, deps, sheetId,
              \\"undefined\\", undefined)
ctx.__lastFnCalled = 'ADD'
let _1 = ctx['ADD'](_2, _5)
return _1;
}"
`;

exports[`expression compiler expression with references with a sheet 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|0|
let _1 = ref(0, deps, sheetId,
              \\"undefined\\", undefined)
return _1;
}"
`;

exports[`expression compiler expressions with a debugger 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =? |0| / |N1|
debugger;
let _2 = ref(0, deps, sheetId,
              \\"undefined\\", undefined)
let _3 = deps[1]
ctx.__lastFnCalled = 'DIVIDE'
let _1 = ctx['DIVIDE'](_2, _3)
return _1;
}"
`;

exports[`expression compiler function call (with lazy parameters) 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =IF(TRUE, |N0|, |N1|)
let _2 = true
let _3 = ()=> deps[0]
let _4 = ()=> deps[1]
ctx.__lastFnCalled = 'IF'
let _1 = ctx['IF'](_2,_3,_4)
return _1;
}"
`;

exports[`expression compiler function call (with lazy parameters) 2`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =IF(TRUE, |0|, |N1|/|N2|)
let _2 = true
let _3 = ()=> ref(0, deps, sheetId,
              \\"IF\\", 2)
let _5 = deps[1]
let _6 = deps[2]
ctx.__lastFnCalled = 'DIVIDE'
let _4 = ()=> ctx['DIVIDE'](_5, _6)
ctx.__lastFnCalled = 'IF'
let _1 = ctx['IF'](_2,_3,_4)
return _1;
}"
`;

exports[`expression compiler function call (with lazy parameters) 3`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =IF(TRUE, IF(TRUE, |0|, SQRT(-|N1|)), |N1|/|N2|)
let _2 = true
let _4 = true
let _5 = ()=> ref(0, deps, sheetId,
              \\"IF\\", 2)
let _8 = deps[1]
ctx.__lastFnCalled = 'UMINUS'
let _7 = ctx['UMINUS']( _8)
ctx.__lastFnCalled = 'SQRT'
let _6 = ()=> ctx['SQRT'](_7)
ctx.__lastFnCalled = 'IF'
let _3 = ()=> ctx['IF'](_4,_5,_6)
let _10 = deps[1]
let _11 = deps[2]
ctx.__lastFnCalled = 'DIVIDE'
let _9 = ()=> ctx['DIVIDE'](_10, _11)
ctx.__lastFnCalled = 'IF'
let _1 = ctx['IF'](_2,_3,_9)
return _1;
}"
`;

exports[`expression compiler function call 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =sum(|N0|,|N1|)
let _2 = deps[0]
let _3 = deps[1]
ctx.__lastFnCalled = 'SUM'
let _1 = ctx['SUM'](_2,_3)
return _1;
}"
`;

exports[`expression compiler function call 2`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =sum(true, |S0|)
let _2 = true
let _3 = deps[0]
ctx.__lastFnCalled = 'SUM'
let _1 = ctx['SUM'](_2,_3)
return _1;
}"
`;

exports[`expression compiler function call 3`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =sum(|N0|,,|N1|)
let _2 = deps[0]
let _3 = deps[1]
ctx.__lastFnCalled = 'SUM'
let _1 = ctx['SUM'](_2,null,_3)
return _1;
}"
`;

exports[`expression compiler read some values and functions 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|0| + sum(|1|)
let _2 = ref(0, deps, sheetId,
              \\"undefined\\", undefined)
let _4 = range(1, deps, sheetId)
ctx.__lastFnCalled = 'SUM'
let _3 = ctx['SUM'](_4)
ctx.__lastFnCalled = 'ADD'
let _1 = ctx['ADD'](_2, _3)
return _1;
}"
`;

exports[`expression compiler simple values 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|N0|
let _1 = deps[0]
return _1;
}"
`;

exports[`expression compiler simple values 2`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =true
let _1 = true
return _1;
}"
`;

exports[`expression compiler simple values 3`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|S0|
let _1 = deps[0]
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|N0| + |N1|
let _2 = deps[0]
let _3 = deps[1]
ctx.__lastFnCalled = 'ADD'
let _1 = ctx['ADD'](_2, _3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 2`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|N0| * |N1|
let _2 = deps[0]
let _3 = deps[1]
ctx.__lastFnCalled = 'MULTIPLY'
let _1 = ctx['MULTIPLY'](_2, _3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 3`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|N0| - |N1|
let _2 = deps[0]
let _3 = deps[1]
ctx.__lastFnCalled = 'MINUS'
let _1 = ctx['MINUS'](_2, _3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 4`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|N0| / |N1|
let _2 = deps[0]
let _3 = deps[1]
ctx.__lastFnCalled = 'DIVIDE'
let _1 = ctx['DIVIDE'](_2, _3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 5`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =-|N0|
let _2 = deps[0]
ctx.__lastFnCalled = 'UMINUS'
let _1 = ctx['UMINUS']( _2)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 6`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =(|N0| + |N1|) * (-|N1| + |N2|)
let _3 = deps[0]
let _4 = deps[1]
ctx.__lastFnCalled = 'ADD'
let _2 = ctx['ADD'](_3, _4)
let _7 = deps[1]
ctx.__lastFnCalled = 'UMINUS'
let _6 = ctx['UMINUS']( _7)
let _8 = deps[2]
ctx.__lastFnCalled = 'ADD'
let _5 = ctx['ADD'](_6, _8)
ctx.__lastFnCalled = 'MULTIPLY'
let _1 = ctx['MULTIPLY'](_2, _5)
return _1;
}"
`;
