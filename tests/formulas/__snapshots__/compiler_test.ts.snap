// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compile functions with lazy arguments functions call requesting lazy parameters 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =USELAZYARG(24)
let _2 = ()=> 24
ctx.__lastFnCalled = 'USELAZYARG'
let _1 = ctx['USELAZYARG'](_2)
return _1;
}"
`;

exports[`compile functions with lazy arguments functions call requesting lazy parameters 2`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =USELAZYARG(1/0)
ctx.__lastFnCalled = 'DIVIDE'
let _2 = ()=> ctx['DIVIDE'](1, 0)
ctx.__lastFnCalled = 'USELAZYARG'
let _1 = ctx['USELAZYARG'](_2)
return _1;
}"
`;

exports[`compile functions with meta arguments function call requesting meta parameter 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =USEMETAARG(|0|)
let _2 = ref(0, deps, sheetId, true)
ctx.__lastFnCalled = 'USEMETAARG'
let _1 = ctx['USEMETAARG'](_2)
return _1;
}"
`;

exports[`compile functions with meta arguments function call requesting meta parameter 2`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =USEMETAARG(|0|)
let _2 = ref(0, deps, sheetId, true)
ctx.__lastFnCalled = 'USEMETAARG'
let _1 = ctx['USEMETAARG'](_2)
return _1;
}"
`;

exports[`expression compiler async functions 1`] = `
"async function anonymous(deps,sheetId,ref,range,ctx
) {
// =WAIT(5)
ctx.__lastFnCalled = 'WAIT'
let _1 = await ctx['WAIT'](5)
return _1;
}"
`;

exports[`expression compiler cells are converted to ranges if function require a range 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =sum(|0|)
let _2 = ref(0, deps, sheetId)
ctx.__lastFnCalled = 'SUM'
let _1 = ctx['SUM'](range(0, deps, sheetId))
return _1;
}"
`;

exports[`expression compiler expression with $ref 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|0|+|1|+|2|
let _3 = ref(0, deps, sheetId)
let _4 = ref(1, deps, sheetId)
ctx.__lastFnCalled = 'ADD'
let _2 = ctx['ADD'](_3, _4)
let _5 = ref(2, deps, sheetId)
ctx.__lastFnCalled = 'ADD'
let _1 = ctx['ADD'](_2, _5)
return _1;
}"
`;

exports[`expression compiler expression with references with a sheet 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|0|
let _1 = ref(0, deps, sheetId)
return _1;
}"
`;

exports[`expression compiler expressions with a debugger 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =? |0| / 2
debugger;
let _2 = ref(0, deps, sheetId)
ctx.__lastFnCalled = 'DIVIDE'
let _1 = ctx['DIVIDE'](_2, 2)
return _1;
}"
`;

exports[`expression compiler read some values and functions 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =|0| + sum(|1|)
let _2 = ref(0, deps, sheetId)
let _4 = ref(1, deps, sheetId)
ctx.__lastFnCalled = 'SUM'
let _3 = ctx['SUM'](range(1, deps, sheetId))
ctx.__lastFnCalled = 'ADD'
let _1 = ctx['ADD'](_2, _3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 1`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =1
return 1;
}"
`;

exports[`expression compiler some arithmetic expressions 2`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =true
return true;
}"
`;

exports[`expression compiler some arithmetic expressions 3`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =\\"abc\\"
return \\"abc\\";
}"
`;

exports[`expression compiler some arithmetic expressions 4`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =1 + 3
ctx.__lastFnCalled = 'ADD'
let _1 = ctx['ADD'](1, 3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 5`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =2 * 3
ctx.__lastFnCalled = 'MULTIPLY'
let _1 = ctx['MULTIPLY'](2, 3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 6`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =2 - 3
ctx.__lastFnCalled = 'MINUS'
let _1 = ctx['MINUS'](2, 3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 7`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =2 / 3
ctx.__lastFnCalled = 'DIVIDE'
let _1 = ctx['DIVIDE'](2, 3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 8`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =-3
ctx.__lastFnCalled = 'UMINUS'
let _1 = ctx['UMINUS']( 3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 9`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =(3 + 1) * (-1 + 4)
ctx.__lastFnCalled = 'ADD'
let _2 = ctx['ADD'](3, 1)
ctx.__lastFnCalled = 'UMINUS'
let _4 = ctx['UMINUS']( 1)
ctx.__lastFnCalled = 'ADD'
let _3 = ctx['ADD'](_4, 4)
ctx.__lastFnCalled = 'MULTIPLY'
let _1 = ctx['MULTIPLY'](_2, _3)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 10`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =sum(1,2)
ctx.__lastFnCalled = 'SUM'
let _1 = ctx['SUM'](1,2)
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 11`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =sum(true, \\"\\")
ctx.__lastFnCalled = 'SUM'
let _1 = ctx['SUM'](true,\\"\\")
return _1;
}"
`;

exports[`expression compiler some arithmetic expressions 12`] = `
"function anonymous(deps,sheetId,ref,range,ctx
) {
// =sum(1,,2)
ctx.__lastFnCalled = 'SUM'
let _1 = ctx['SUM'](1,null,2)
return _1;
}"
`;
