// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`makeSanitizer a default value of 0 1`] = `
"function anonymous(args
) {
if (args.length > 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"undefined\\":
   args[0] = 0;
   break;
 case \\"boolean\\":
   args[0] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"m\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[0] = n;
     }
   } else {
     args[0] = 0;
   }
   break;
  case \\"object\\":
    if (_val_1 === null) {
      args[0] = 0;
      break;
    }
    break;
}
return args;
}"
`;

exports[`makeSanitizer a simple range of booleans 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
if (!(_val_1 instanceof Array)) {
   throw new Error(\`Argument \\"r\\" has the wrong type\`);
}
for (let i = 0; i < _val_1.length; i++) {
  let col = _val_1[i];
  for (let j = 0; j < col.length; j++) {
    if (typeof col[j] !== \\"boolean\\") {
      col[j] = undefined;
    }
  }
}
return args;
}"
`;

exports[`makeSanitizer a simple range of numbers 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
if (!(_val_1 instanceof Array)) {
   throw new Error(\`Argument \\"r\\" has the wrong type\`);
}
for (let i = 0; i < _val_1.length; i++) {
  let col = _val_1[i];
  for (let j = 0; j < col.length; j++) {
    if (typeof col[j] !== \\"number\\") {
      col[j] = undefined;
    }
  }
}
return args;
}"
`;

exports[`makeSanitizer a simple range of strings 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
if (!(_val_1 instanceof Array)) {
   throw new Error(\`Argument \\"r\\" has the wrong type\`);
}
for (let i = 0; i < _val_1.length; i++) {
  let col = _val_1[i];
  for (let j = 0; j < col.length; j++) {
    if (typeof col[j] !== \\"string\\") {
      col[j] = undefined;
    }
  }
}
return args;
}"
`;

exports[`makeSanitizer a simple untyped range argument 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
if (!(_val_1 instanceof Array)) {
   throw new Error(\`Argument \\"r\\" has the wrong type\`);
}
return args;
}"
`;

exports[`makeSanitizer a single boolean argument 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"undefined\\":
   args[0] = false;
   break;
 case \\"number\\":
   args[0] = _val_1 ? true : false;
   break;
 case \\"string\\":
   if (args[0]) {
     let uppercaseVal = _val_1.toUpperCase();
     if (uppercaseVal === \\"TRUE\\") {
       args[0] = true;
     } else if (uppercaseVal === \\"FALSE\\") {
       args[0] = false;
     } else {
       throw new Error(\`Argument \\"b\\" should be a boolean, but \\"\${_val_1}\\" is a text, and cannot be coerced to a boolean.\`);
     }
   } else {
     args[0] = false;
   }
   break;
}
return args;
}"
`;

exports[`makeSanitizer a single number argument 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"boolean\\":
   args[0] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"n\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[0] = n;
     }
   } else {
     args[0] = 0;
   }
   break;
  case \\"object\\":
    if (_val_1 === null) {
      args[0] = 0;
      break;
    }
    break;
}
return args;
}"
`;

exports[`makeSanitizer a single string argument 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"undefined\\":
   args[0] = \\"\\";
   break;
 case \\"number\\":
   args[0] = _val_1.toString();
   break;
 case \\"boolean\\":
   args[0] = _val_1 ? \\"TRUE\\" : \\"FALSE\\";
   break;
 case \\"object\\":
   if (_val_1 === null) {
     args[0] = \\"\\";
     break;
   }
   break;
}
return args;
}"
`;

exports[`makeSanitizer an optional number argument 1`] = `
"function anonymous(args
) {
if (args.length > 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"boolean\\":
   args[0] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"n\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[0] = n;
     }
   } else {
     args[0] = 0;
   }
   break;
}
return args;
}"
`;

exports[`makeSanitizer an optional number argument after another argument 1`] = `
"function anonymous(args
) {
if (args.length < 1 || args.length > 2) {
  throw new Error(\`Wrong number of arguments. Expected 2, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"boolean\\":
   args[0] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"m\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[0] = n;
     }
   } else {
     args[0] = 0;
   }
   break;
  case \\"object\\":
    if (_val_1 === null) {
      args[0] = 0;
      break;
    }
    break;
}
let _val_2 = args[1];
switch (typeof _val_2) {
 case \\"boolean\\":
   args[1] = _val_2 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_2) {
     let n = Number(_val_2);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"n\\" should be a number, but \\"\${_val_2}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[1] = n;
     }
   } else {
     args[1] = 0;
   }
   break;
}
return args;
}"
`;

exports[`makeSanitizer an optional number argument with a default value 1`] = `
"function anonymous(args
) {
if (args.length > 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"undefined\\":
   args[0] = 42;
   break;
 case \\"boolean\\":
   args[0] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"n\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[0] = n;
     }
   } else {
     args[0] = 0;
   }
   break;
  case \\"object\\":
    if (_val_1 === null) {
      args[0] = 0;
      break;
    }
    break;
}
return args;
}"
`;

exports[`makeSanitizer number or range of numbers 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"boolean\\":
   args[0] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"n\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[0] = n;
     }
   } else {
     args[0] = 0;
   }
   break;
  case \\"object\\":
    if (_val_1 === null) {
      args[0] = 0;
      break;
    }
if (!(_val_1 instanceof Array)) {
   throw new Error(\`Argument \\"n\\" has the wrong type\`);
}
for (let i = 0; i < _val_1.length; i++) {
  let col = _val_1[i];
  for (let j = 0; j < col.length; j++) {
    if (typeof col[j] !== \\"number\\") {
      col[j] = undefined;
    }
  }
}
    break;
}
return args;
}"
`;

exports[`makeSanitizer repeating, non optional, number argument 1`] = `
"function anonymous(args
) {
if (args.length < 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
for (let i = 0; i < args.length; i++) {
let _val_1 = args[i];
switch (typeof _val_1) {
 case \\"boolean\\":
   args[i] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"n\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[i] = n;
     }
   } else {
     args[i] = 0;
   }
   break;
  case \\"object\\":
    if (_val_1 === null) {
      args[i] = 0;
      break;
    }
    break;
}
}
return args;
}"
`;

exports[`makeSanitizer repeating, optional, number argument 1`] = `
"function anonymous(args
) {
for (let i = 0; i < args.length; i++) {
let _val_1 = args[i];
switch (typeof _val_1) {
 case \\"boolean\\":
   args[i] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"n\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[i] = n;
     }
   } else {
     args[i] = 0;
   }
   break;
  case \\"object\\":
    if (_val_1 === null) {
      args[i] = 0;
      break;
    }
    break;
}
}
return args;
}"
`;

exports[`makeSanitizer string or range of strings 1`] = `
"function anonymous(args
) {
if (args.length !== 1) {
  throw new Error(\`Wrong number of arguments. Expected 1, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"undefined\\":
   args[0] = \\"\\";
   break;
 case \\"number\\":
   args[0] = _val_1.toString();
   break;
 case \\"boolean\\":
   args[0] = _val_1 ? \\"TRUE\\" : \\"FALSE\\";
   break;
 case \\"object\\":
   if (_val_1 === null) {
     args[0] = \\"\\";
     break;
   }
if (!(_val_1 instanceof Array)) {
   throw new Error(\`Argument \\"s\\" has the wrong type\`);
}
for (let i = 0; i < _val_1.length; i++) {
  let col = _val_1[i];
  for (let j = 0; j < col.length; j++) {
    if (typeof col[j] !== \\"string\\") {
      col[j] = undefined;
    }
  }
}
   break;
}
return args;
}"
`;

exports[`makeSanitizer two optional number arguments after another argument, with default values 1`] = `
"function anonymous(args
) {
if (args.length < 1 || args.length > 3) {
  throw new Error(\`Wrong number of arguments. Expected 3, but got \${args.length} argument(s) instead.\`);
}
let _val_1 = args[0];
switch (typeof _val_1) {
 case \\"boolean\\":
   args[0] = _val_1 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_1) {
     let n = Number(_val_1);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"m\\" should be a number, but \\"\${_val_1}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[0] = n;
     }
   } else {
     args[0] = 0;
   }
   break;
  case \\"object\\":
    if (_val_1 === null) {
      args[0] = 0;
      break;
    }
    break;
}
let _val_2 = args[1];
switch (typeof _val_2) {
 case \\"undefined\\":
   args[1] = 1;
   break;
 case \\"boolean\\":
   args[1] = _val_2 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_2) {
     let n = Number(_val_2);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"n\\" should be a number, but \\"\${_val_2}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[1] = n;
     }
   } else {
     args[1] = 0;
   }
   break;
  case \\"object\\":
    if (_val_2 === null) {
      args[1] = 0;
      break;
    }
    break;
}
let _val_3 = args[2];
switch (typeof _val_3) {
 case \\"undefined\\":
   args[2] = 2;
   break;
 case \\"boolean\\":
   args[2] = _val_3 ? 1 : 0;
   break;
 case \\"string\\":
   if (_val_3) {
     let n = Number(_val_3);
     if (isNaN(n)) {
       throw new Error(\`Argument \\"p\\" should be a number, but \\"\${_val_3}\\" is a text, and cannot be coerced to a number.\`);
     } else {
       args[2] = n;
     }
   } else {
     args[2] = 0;
   }
   break;
  case \\"object\\":
    if (_val_3 === null) {
      args[2] = 0;
      break;
    }
    break;
}
return args;
}"
`;
